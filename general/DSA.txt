Heap:

Array representation (0 is the first element):
Node at index i --> parent of i is Floor(i-1)/2.
Node at index i --> left child of i is 2i + 1.
Node at index i --> right child of i is 2i + 2.


- Heap is a complete binary tree.
- Max heap is a complete binary tree with the largest element at the root and all the descendants are smaller than the root.
- Min heap is a complete binary tree with the smallest element at the root and all the descendants are larger than the root.

Max Heap Insertion: (logn)
- Insert element at the end of the array.
- Compare the new element with its parent.
- If the new element is larger than its parent, swap them.
- Repeat until the new element is smaller than its parent.

Max Heap deletion: (logn)
- Delete the root element (first element in the array).
- place the last node (last element in the array) at the root node(first element in the array).
- Compare the new root with its biggest children.
- If the new root is smaller than its biggest children, swap them.
- Repeat the process of comparing each node with its biggest children and swap them if they are smaller.

Heap sort:(nlogn)
- Create a max heap from the array.
- Delete every element from the heap and place it in the array.
- the array will be a sorted one.


Heapify:(max heap)  - (O(n))
- scan the matrix from right to left.
- for each element, if the element does not have a child(meaning it is a leaf), then skip it.
- if the element has a child, then compare the element with its parent.
- if the element is smaller than its parent, then swap them.
- repeat the process until the each child is smaller than its parent.

Heap creation : (nlogn)

Heapify(O(n)) < heap creation O(nlogn)
----------------------------------------------------
Tree:

Full Binary tree:
 -number of nodes in full binary tree of height h = 2^h - 1.
 -A complete binary tree when represented in an array will not have any gaps in the array.
 - height of a complete binary tree will be logn.

-------------------------------------

Sort:-

Merge Sort: O(m+n)
2 way Merge sort: O(nlogn).
array=[9,3,6,1,2,5,7,4,8]
first pass :[3,9],[6,1],[2,5],[7,4],[8]
second pass:[3,6,1,2],[9,5,7,4,8]
third pass:[3,6,1,2,4,9,5,7,8]

merge sort recursive algorithm:
lowpointer=0, highpointer=len(array)-1
mergeSort(array,lowpointer,highpointer)
if(lowpointer<highpointer){
    mid=floor((lowpointer+highpointer)/2)
    left=mergeSort(array,lowpointer,mid)
    rightmergeSort(array,mid+1,highpointer)
    merge(left,right)
}

Advantages of merge sort:
- It is a stable sort - meaning order of the same numbers will not change.
- it can handle very large data sets.(can take a chunk of data in memory and process it at a time)

cons of mergeSort:
- not efficient for smaller datasets(takes more time compared to other algorithms like insertion sort-n<15 elements).
- not an inplace sort.(meaning needs extra space to sort)

space complexity - O(n+logn)
-------------------------------------
quick sort:
best case - O(nlogn)
worst case - O(n^2)
-------------------------------------
Optimal merge pattern:
- merge smaller sets first and then merge the two sets.
-------------------------------------

Graph:
Graph is a collection of nodes and edges.
G={V,E} vertices, edges.
edges are directed or undirected.
spanning tree is a subgraph of the graph that contains all the vertices(v) but v-1 edges.
A tree should not have cycles.

-------------------------------------


Optimization problems:

This can be solved using
    1. Greedy method.
        -using the known or proven methods or predefined procedures to solve the problem and not by trying all combinations. eg: krishkal's algorithm , Dijkstra's algorithm (choosing the shortest path at each step).
        -done in stages by taking in the optimum inputs at each stage.
    2. Dynamic programming.
        -trying all possible combinations to find the optimum one.
    3. Branch and bound.


-------------------------------------

Dijkstra algorithm is a greedy algorithm that finds the shortest path between two vertices in a graph.
It may not work for graphs with negative weights.
Bellman-Ford algorithm is a greedy algorithm that finds the shortest path between two vertices in a graph with negative weights.

Bellman Ford algorithm: O(n^3)
- relax all the edges for n-1 times.
relaxation of an edge v of edge (u,v): 
min((cost of u + distance of  v), cost of v).

Bellman ford algorithm will give wrong results if there is a negative weighted cycle in the graph and the nodes are relaxed for more than n-1 times.

-------------------------------------
